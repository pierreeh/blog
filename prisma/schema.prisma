// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  role          Int            @default(0) @db.SmallInt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PostCategory  PostCategory[]
  PostTag       PostTag[]
  Post          Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PostCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  image       String?
  published   Boolean  @default(true) @db.Boolean
  visible     Boolean  @default(true) @db.Boolean
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  color       String

  user    User      @relation(fields: [user_id], references: [id])
  Post    Post[]
  PostTag PostTag[]
}

model PostTag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  published   Boolean  @default(true) @db.Boolean
  visible     Boolean  @default(true) @db.Boolean
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  category_id String

  user     User         @relation(fields: [user_id], references: [id])
  category PostCategory @relation(fields: [category_id], references: [id])
  TagsPost TagsPost[]
}

model Post {
  id               String   @id @default(cuid())
  title            String
  slug             String
  featured_image   String?
  excerpt          String   @db.Text
  body             Json
  publish_time     DateTime @default(now()) @db.Date
  comments_allowed Boolean  @default(true) @db.Boolean
  published        Boolean  @default(true) @db.Boolean
  visible          Boolean  @default(true) @db.Boolean
  user_id          String
  category_id      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  user     User         @relation(fields: [user_id], references: [id])
  category PostCategory @relation(fields: [category_id], references: [id])
  TagsPost TagsPost[]
}

model TagsPost {
  id      String @id @default(cuid())
  post_id String
  tag_id  String

  post Post    @relation(fields: [post_id], references: [id])
  tag  PostTag @relation(fields: [tag_id], references: [id])
}
